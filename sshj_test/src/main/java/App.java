import com.google.common.base.Throwables;
import net.schmizz.sshj.SSHClient;
import net.schmizz.sshj.common.IOUtils;
import net.schmizz.sshj.connection.ConnectionException;
import net.schmizz.sshj.connection.channel.direct.Session;
import net.schmizz.sshj.transport.TransportException;
import net.schmizz.sshj.transport.verification.PromiscuousVerifier;
import net.schmizz.sshj.userauth.UserAuthException;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException
    {
        SSHClient ssh = new SSHClient();

        try {
            ssh.addHostKeyVerifier(new PromiscuousVerifier());
            ssh.loadKnownHosts();
            ssh.connect("192.168.10.20");
//            ssh.authPassword("arch", "password");

        } catch (IOException ex) {
            throw Throwables.propagate(ex);
        }

        try {
//                ssh.authPublickey(params.get("user",String.class,System.getProperty("user.name")));
//                ssh.authPublickey("arch");

//                  ssh.authPublickey("arch",;
//                ssh.authPublickey(params.get("user",String.class,System.getProperty("user.name")));
//                ssh.authPublickey(System.getProperty("user.name"));
            ssh.authPublickey("arch","/Users/hsato/.ssh/id_rsa_fuga");
            final Session session = ssh.startSession();
            final Session.Command result = session.exec("echo test");
            //final Session.Command result = session.exec("/usr/bin/false");
            result.join(1, TimeUnit.SECONDS);
            System.out.println(IOUtils.readFully(result.getInputStream()).toString());
            System.out.println(result.getExitStatus());
//            InputStream is = result.getInputStream();
//            System.out.println(is.read());

        }
        catch (UserAuthException ex) {
            throw Throwables.propagate(ex);
        }
        catch (ConnectionException ex) {
            throw Throwables.propagate(ex);
        }
        catch (TransportException ex) {
            ex.printStackTrace();
        }
        finally {
            ssh.close();
        }

        ssh.disconnect();
    }
}
